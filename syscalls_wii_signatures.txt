0x00:int IOS_CreateThread(void* proc, void* arg, uint* stack_top, uint stacksize, int priority, uint detached)
0x01:int JoinThread(int threadid, uint *returned_value)
0x02:int CancelThread(int threadid, uint return_value )
0x03:int IOS_GetThreadId()
0x04:int GetProcessId()
0x05:int IOS_StartThread(int threadid)
0x06:int SuspendThread(int threadid)
0x07:void YieldThread(void)
0x08:int IOS_GetThreadPriority(int threadid)
0x09:int IOS_SetThreadPriority(int threadid, int priority)
0x0A:int IOS_CreateMessageQueue(void * *ptr, uint n_msgs)
0x0B:int IOS_DestroyMessageQueue(int queueid)
0x0C:int IOS_SendMessage(int queueid, void * message, uint flags)
0x0D:int IOS_JamMessage(int queueid, void * message, uint flags)
0x0E:int IOS_ReceiveMessage(int queueid, void * *message, uint flags)
0x0F:int IOS_HandleEvent(int device, int queueid, void * message)
0x10:int UnregisterEventHandler(int device)
0x11:int IOS_CreateTimer(int time_us, int repeat_time_us, int queueid, void * message)
0x12:int IOS_RestartTimer(int timerid, int time_us, int repeat_time_us)
0x13:int IOS_StopTimer(int timerid)
0x14:int IOS_DestroyTimer(int timerid)
0x15:uint time_now()
0x16:int IOS_CreateHeap(void *ptr, int size)
0x17:int IOS_DestroyHeap(int heapid)
0x18:void* IOS_Alloc(int heapid, uint size)
0x19:void* IOS_AllocAligned(int heapid, uint size, uint align)
0x1A:int IOS_Free(int heapid, void *ptr)
0x1B:int IOS_RegisterResourceManager( char* device, int queueid)
0x1C:int IOS_Open( char* path, int mode)
0x1D:int IOS_Close(int fd)
0x1E:int IOS_Read(int fd, void *buf, uint len)
0x1F:int IOS_Write(int fd,  void *buf, uint len)
0x20:int IOS_Seek(int fd, int offset, int origin)
0x21:int IOS_Ioctl(int fd, uint request, void *input_buffer, uint input_buffer_len, void *output_buffer, uint output_buffer_len)
0x22:int IOS_Ioctlv(int fd, uint request, uint vector_count_in, uint vector_count_out, void *vector)
0x23:int IOS_OpenAsync( char* device, int mode, int queueid, void *message)
0x24:int IOS_CloseAsync(int fd, int queueid, void *message)
0x25:int IOS_ReadAsync(int fd, void *buf, uint len, int queueid, void *message)
0x26:int IOS_WriteAsync(int fd,  void *buf, uint len, int queueid, void *message)
0x27:int IOS_SeekAsync(int fd, int offset, int origin, int queueid, void *message)
0x28:int IOS_IoctlAsync(int fd, uint request, void *input_buffer, uint input_buffer_len, void *output_buffer, uint output_buffer_len, int queueid, void *message)
0x29:int IOS_IoctlvAsync(int fd, uint request, uint vector_count_in, uint vector_count_out, void *vector, int queueid, void *message)
0x2A:int IOS_ResourceReply(  void * *request, int retval)
0x2B:int SetUid(uint pid, uint uid)
0x2C:uint GetUid(void)
0x2D:int SetGid(uint pid, ushort gid)
0x2E:uint GetGid(void)
0x2F:int AHB_MemFlush(int ahb_dev)
0x30:int AHB_MemRBInvalidate(int ahb_dev)
0x31:int ClearAndEnableIPCIOPIntr(void)
0x32:int ClearAndEnableDIIntr(void)
0x33:int ClearAndEnableSDIntr(byte hc)
0x34:int ClearAndEnableEvent(uint event)
0x35:int AccessIobPool(uint pool)
0x36:void* alloc_iobuf(void *arg1, void *sbuf)
0x37:int free_iobuf(void *buf)
0x38:void iobuf_log_header_info()
0x39:void iobuf_log_buffer_info()
0x3A:void* extend_iobuf(void *iob, ushort num)
0x3B:void* IOS_PushIob(void *iob, ushort num)
0x3C:void* IOS_PullIob(void *iob, ushort num)
0x3D:int verify_iobuf(void *iob)
0x3E:void syscall_3e()
0x3F:void IOS_InvalidateDCache(void *address, uint size)
0x40:void IOS_FlushDCache( void *address, uint size)
0x41:int IOS_StartPPC( char *path)
0x42:int ios_boot( char* path, bool suspendBroadway, uint version)
0x43:int boot_new_ios_kernel(void* ios_binary_address, uint new_version)
0x44:int assert_di_reset()
0x45:int deassert_di_reset()
0x46:bool check_di_reset()
0x47:void get_kernel_flavor(uint *type, ushort *unk)
0x48:void get_unk_flavor(uint *type, ushort *unk)
0x49:uint get_boot_vector()
0x4A:uint GetHollywoodId(void)
0x4B:void kernel_debug_print(uint flags)
0x4C:int SetLoMemOSVersion(uint version)
0x4D:uint GetLoMemOSVersion(void)
0x4E:int SetDiSpinup(uint s)
0x4F:void* VirtualToPhysical(void *virt)
0x50:int SetDvdReadDisable(byte disable)
0x51:uint GetDvdReadDisable(void)
0x52:int SetEnableAHBPI2DI(byte enable)
0x53:byte GetEnableAHBPI2DI(void)
0x54:int SetPPCACRPerms(byte enable)
0x55:uint GetBusSpeed(void)
0x56:int ACRRegWrite(uint offset, uint value)
0x57:int DDRRegWrite(uint offset, uint value)
0x58:void OutputDebugPort(byte value)
0x59:int SetIpcAccessRights(byte *rights)
0x5A:int LaunchRM( char *path)
0x5B:int IOSC_CreateObject(uint* key_handle, uint type, uint subtype)
0x5C:int IOSC_DeleteObject(uint key_handle)
0x5D:int IOSC_ImportSecretKey(uint importedHandle, uint verifyHandle, uint decryptHandle, uint flag, byte * signbuffer, byte * ivData, byte * keybuffer)
0x5E:int IOSC_ExportSecretKey(uint exportedHandle, uint signHandle, uint encryptHandle, uint security_flag, byte * signbuffer, byte * ivData, byte * keybuffer)
0x5F:int IOSC_ImportPublicKey(byte * publicKeyData, byte * exponent, uint publicKeyHandle)
0x60:int IOSC_ExportPublicKey(byte * publicKeyData, byte * exponent, uint publicKeyHandle)
0x61:int IOSC_ComputeSharedKey(uint privateHandle, uint publicHandle, uint sharedHandle)
0x62:int IOSC_SetData(uint dataHandle, uint value)
0x63:int IOSC_GetData(uint dataHandle, uint * value)
0x64:int IOSC_GetKeySize(uint * keySize, uint handle)
0x65:int IOSC_GetSignatureSize(uint * signSize, int handle)
0x66:int IOSC_GenerateHashAsync(byte * context, byte * inputData, uint inputSize, uint chainingFlag, byte * hashData, int message_queue_id, void* reply)
0x67:int IOSC_GenerateHash(byte * context, byte * inputData, uint inputSize, uint chainingFlag, byte * hashData)
0x68:int IOSC_EncryptAsync(uint encryptHandle, byte * ivData, byte * inputData, uint inputSize, byte * outputData, int message_queue_id, void* reply)
0x69:int IOSC_Encrypt(uint encryptHandle, byte * ivData, byte * inputData, uint inputSize, byte * outputData)
0x6A:int IOSC_DecryptAsync(uint decryptHandle, byte * ivData, byte * inputData, uint inputSize, byte * outputData, int message_queue_id, void* request)
0x6B:int IOSC_Decrypt(uint decryptHandle, byte * ivData, byte * inputData, uint inputSize, byte * outputData)
0x6C:int IOSC_VerifyPublicKeySign(byte * inputData, uint inputSize, uint publicHandle, byte * signData)
0x6D:int IOSC_GenerateBlockMAC(byte * context, byte * inputData, uint inputSize, byte * customData, uint customDataSize, uint signerHandle, uint chainingFlag, byte * signData)
0x6E:int IOSC_GenerateBlockMACAsync(byte * context, byte * inputData, uint inputSize, byte * customData, uint customDataSize, uint signerHandle, uint chainingFlag, byte * signData, int message_queue_id, void* reply)
0x6F:int IOSC_ImportCertificate(byte * certData, uint signerHandle, uint publicKeyHandle)
0x70:int IOSC_GetDeviceCertificate(void * certificate)
0x71:int IOSC_SetOwnership(uint handle, uint users)
0x72:int IOSC_GetOwnership(uint handle, uint * users)
0x73:int IOSC_GenerateRand(byte * randBytes, uint numBytes)
0x74:int IOSC_GenerateKey(uint handle)
0x75:int IOSC_GeneratePublicKeySign(byte * hash, uint hashLength, uint signerHandle, byte * eccSignature)
0x76:int IOSC_GenerateCertificate(uint privateHandle, char * certname, void * certificate)
0x77:int IOSC_CheckDiHashes(byte * destAddr, byte * diskRdBuf, uint h1Index, uint h2Index, byte * h3Ptr)
0x78:int SetProcessPriorities(void *newPriorities, uint numProcesses)
0x79:int GetProcessPriorities(void *priorities, uint numProcesses)
0x7A:int syscall_7a()
0x7B:int syscall_7b()
0x7C:int syscall_7c()
